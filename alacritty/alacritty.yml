#
key_bindings:
    - { key: F11, action: ToggleFullscreen }

# Configuration for Alacritty, the GPU enhanced terminal emulator

# Any items in the `env` entry below will be added as
# environment variables. Some entries may override variables
# set by alacritty it self.
env:
    # TERM env customization.
    #
    # If this property is not set, alacritty will set it to xterm-256color.
    #
    # Note that some xterm terminfo databases don't declare support for italics.
    # You can verify this by checking for the presence of `smso` and `sitm` in
    # `infocmp xterm-256color`.
    TERM: xterm-256color

window:
    opacity: 1.0
    # Window dimensions in character columns and lines
    # (changes require restart)
    dimensions:
        columns: 100
        lines: 30

    # Adds this many blank pixels of padding around the window
    # Units are physical pixels; this is not DPI aware.
    # (change requires restart)
    padding:
        x: 0
        y: 0

    # Window decorations
    # Setting this to false will result in window without borders and title bar.
    decorations: None

    startup_mode: Windowed

    dynamic_title: true

    option_as_alt: Both

# When true, bold text is drawn using the bright variant of colors.
draw_bold_text_with_bright_colors: true

# Font configuration (changes require restart)
font:
    # The normal (roman) font face to use.
    normal:
        family: JetBrainsMono Nerd Font
        # Style can be specified to pick a specific face.
        style: Regular

    # The bold font face
    bold:
        family: JetBrainsMono Nerd Font
        # Style can be specified to pick a specific face.
        style: Bold

    # The italic font face
    italic:
        family: JetBrainsMono Nerd Font
        # Style can be specified to pick a specific face.
        # style: Regular

    # Point size of the font
    size: 11.9

    # Offset is the extra space around each character. offset.y can be thought of
    # as modifying the linespacing, and offset.x as modifying the letter spacing.
    offset:
        x: 0
        y: 0

    # Glyph offset determines the locations of the glyphs within their cells with
    # the default being at the bottom. Increase the x offset to move the glyph to
    # the right, increase the y offset to move the glyph upward.
    glyph_offset:
        x: 0
        y: 0

    # Scale the font size based on the monitor's DPI. This will lead to bigger text on HiDPI
    # screens and make reading text a little easier.
    #scale_with_dpi: true

# Should display the render timer
debug.render_timer: false

colors:
    # Default colors
    primary:
        background: "#0E0E18"
        foreground: "#e4d0a8"

    # Normal colors

    normal:
        black: "#363646"
        red: "#957fb8"
        green: "#957fb8"
        yellow: "#7e9cd8"
        blue: "#e4d0a8"
        magenta: "#D4A140"
        cyan: "#F6C457"
        white: "#efdaaf"

    bright:
        black: "#a7987a"
        red: "#957fb8"
        green: "#54546d"
        yellow: "#4C3F47"
        blue: "#90734E"
        magenta: "#D4A140"
        cyan: "#F6C457"
        white: "#efdaaf"

    indexed_colors:
        - { index: 16, color: "#0E0E18" }
        - { index: 17, color: "#e4d0a8" }
# Visual Bell
#
# Any time the BEL code is received, Alacritty "rings" the visual bell. Once
# rung, the terminal background will be set to white and transition back to the
# default background color. You can control the rate of this transition by
# setting the `duration` property (represented in milliseconds). You can also
# configure the transition function by setting the `animation` property.
#
# Possible values for `animation`
# `Ease`
# `EaseOut`
# `EaseOutSine`
# `EaseOutQuad`
# `EaseOutCubic`
# `EaseOutQuart`
# `EaseOutQuint`
# `EaseOutExpo`
# `EaseOutCirc`
# `Linear`
#
# To completely disable the visual bell, set its duration to 0.
#
bell:
    animation: EaseOutExpo
    duration: 0

# Background opacity
window.opacity: 0.0

# Mouse bindings
#
# Currently doesn't support modifiers. Both the `mouse` and `action` fields must
# be specified.
#
# Values for `mouse`:
# - Middle
# - Left
# - Right
# - Numeric identifier such as `5`
#
# Values for `action`:
# - Paste
# - PasteSelection
# - Copy (TODO)
mouse_bindings:
    - { mouse: Middle, action: PasteSelection }

mouse:
    # Click settings
    #
    # The `double_click` and `triple_click` settings control the time
    # alacritty should wait for accepting multiple clicks as one double
    # or triple click.
    double_click: { threshold: 300 }
    triple_click: { threshold: 300 }

    hide_when_typing: true

    #url:
    #  launcher: open
    # Faux Scrollback
    #
    # The `faux_scrollback_lines` setting controls the number
    # of lines the terminal should scroll when the alternate
    # screen buffer is active. This is used to allow mouse
    # scrolling for applications like `man`.
    #
    # To disable this completely, set `faux_scrollback_lines` to 0.
    faux_scrolling_lines: 1

selection:
    semantic_escape_chars: ',â”‚`|:"'' ()[]{}<>'

cursor:
    style:
        blinking: Always
    blink_timeout: 0
    blink_interval: 500

# Live config reload (changes require restart)
live_config_reload: true
# theme: Catppuccin

# Shell
#
# You can set shell.program to the path of your favorite shell, e.g. /bin/fish.
# Entries in shell.args are passed unmodified as arguments to the shell.
#
shell:
    program: /bin/zsh
#   args:
#     - --login
# Key bindings
#
# Each binding is defined as an object with some properties. Most of the
# properties are optional. All of the alphabetical keys should have a letter for
# the `key` value such as `V`. Function keys are probably what you would expect
# as well (F1, F2, ..). The number keys above the main keyboard are encoded as
# `Key1`, `Key2`, etc. Keys on the number pad are encoded `Number1`, `Number2`,
# etc.  These all match the glutin::VirtualKeyCode variants.
#
# A list with all available `key` names can be found here:
# https://docs.rs/glutin/*/glutin/enum.VirtualKeyCode.html#variants
#
# Possible values for `mods`
# `Command`, `Super` refer to the super/command/windows key
# `Control` for the control key
# `Shift` for the Shift key
# `Alt` and `Option` refer to alt/option
#
# mods may be combined with a `|`. For example, requiring control and shift
# looks like:
#
# mods: Control|Shift
#
# The parser is currently quite sensitive to whitespace and capitalization -
# capitalization must match exactly, and piped items must not have whitespace
# around them.
#
# Either an `action`, `chars`, or `command` field must be present.
#   `action` must be one of `Paste`, `PasteSelection`, `Copy`, or `Quit`.
#   `chars` writes the specified string every time that binding is activated.
#     These should generally be escape sequences, but they can be configured to
#     send arbitrary strings of bytes.
#   `command` must be a map containing a `program` string, and `args` array of
#     strings. For example:
#     - { ... , command: { program: "alacritty", args: ["-e", "vttest"] } }
